{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","rating","year","title","summary","torrents","poster","genres","className","src","alt","map","genre","index","key","url","size","seeds","App","state","isLoding","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RA6EeA,MArEf,YAA+E,EAA9DC,GAA+D,IAA3DC,EAA0D,EAA1DA,OAAQC,EAAkD,EAAlDA,KAAMC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,SAAUC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OACnE,OACE,yBAAKC,UAAU,SAab,yBAAKC,IAAKH,EAAQI,IAAKP,EAAOA,MAAOA,IACrC,yBAAKK,UAAU,cAEb,wBAAIA,UAAU,eACXL,EADH,KACYD,EADZ,uBAC4BD,EAD5B,KAIA,wBAAIO,UAAU,UAEXD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,EAAOL,UAAU,iBACvBI,OAKP,yBAAKJ,UAAU,iBAAf,iBAEE,uBAAGA,UAAU,wBAAwBJ,IAEvC,yBAAKI,UAAU,WAAf,uBAEE,uBAAGA,UAAU,iBAAb,2BACA,wBAAIA,UAAU,eACZ,qCAAWH,EAAS,GAAGU,KACvB,oDAAWV,EAAS,GAAGW,MACvB,8CAAUX,EAAS,GAAGY,QAExB,uBAAGT,UAAU,iBAAb,0BACA,wBAAIA,UAAU,cACZ,qCAAWH,EAAS,GAAGU,KACvB,oDAAWV,EAAS,GAAGW,MACvB,8CAAUX,EAAS,GAAGY,YC2DnBC,E,4MArGbC,MAAQ,CACNC,UAAU,EACVC,OAAQ,I,EAIVC,U,sBAAY,8BAAAC,EAAA,sEAWAC,IAAMC,IACd,qEAZQ,gBAQEJ,EARF,EAORK,KACEA,KAAQL,OAYZ,EAAKM,SAAS,CAAEN,SAAQD,UAAU,IApBxB,2C,kEAkCVQ,KAAKN,c,+BAGG,IAAD,EACsBM,KAAKT,MAA1BC,EADD,EACCA,SAAUC,EADX,EACWA,OAGlB,OA0BE,6BAASb,UAAU,aAChBY,EACC,yBAAKZ,UAAU,UACb,0BAAMA,UAAU,eAAhB,eAGF,yBAAKA,UAAU,UACZa,EAAOV,KAAI,SAACkB,GAAD,OACV,kBAAC,EAAD,CACEtB,OAAQsB,EAAMtB,OACdO,IAAKe,EAAM7B,GACXA,GAAI6B,EAAM7B,GACVC,OAAQ4B,EAAM5B,OACdC,KAAM2B,EAAM3B,KACZC,MAAO0B,EAAM1B,MACbC,QAASyB,EAAMzB,QACfC,SAAUwB,EAAMxB,SAChBC,OAAQuB,EAAMC,wBAXpB,U,GAhFQC,IAAMC,WCPxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.a1d604a7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import \"./Movie.css\";\r\nimport \"./App.css\";\r\n// import { Link } from \"react-router-dom\";\r\n\r\n// component가 state가 필요없을때엔 class 컴포넌트 필요없고 그냥 펑션불러\r\n// style을 추가하는 방식은 style={{}} 하고 바로 사용할수도 있고 style파일을 따로 만들수도\r\nfunction Movie({ id, rating, year, title, summary, torrents, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      {/* <Link\r\n        to={{\r\n          pathname: `/movie/${id}`,\r\n          state: {\r\n            year,\r\n            title,\r\n            summary,\r\n            poster,\r\n            genres,\r\n          },\r\n        }}\r\n      > */}\r\n      <img src={poster} alt={title} title={title} />\r\n      <div className=\"movie_data\">\r\n        {/* {{ 이렇게 바로 쓸수도 }}-> style={{ backgroundColor: \"gray\" }} */}\r\n        <h3 className=\"movie_title\">\r\n          {title} ({year}) - 평점 : ({rating})\r\n        </h3>\r\n\r\n        <ul className=\"genres\">\r\n          {/* map은 디폴트로 인덱스를 준다. li 테그의 each는 키를줘야하는데 디폴트 인덱스를 주는거다 */}\r\n          {genres.map((genre, index) => (\r\n            <li key={index} className=\"generes_genre\">\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n\r\n        <div className=\"movie_summary\">\r\n          [개요]\r\n          <p className=\"movie_summary_detail\">{summary}</p>\r\n        </div>\r\n        <div className=\"torrent\">\r\n          [토렌트]\r\n          <p className=\"torrent_title\">1080 토렌트</p>\r\n          <ul className=\"1080torrent\">\r\n            <li>url : {torrents[0].url}</li>\r\n            <li>사이즈 : {torrents[0].size}</li>\r\n            <li>시드 : {torrents[0].seeds}</li>\r\n          </ul>\r\n          <p className=\"torrent_title\">720 토렌트</p>\r\n          <ul className=\"720torrent\">\r\n            <li>url : {torrents[1].url}</li>\r\n            <li>사이즈 : {torrents[1].size}</li>\r\n            <li>시드 : {torrents[1].seeds}</li>\r\n          </ul>\r\n        </div>\r\n      </div>\r\n      {/* </Link> */}\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  rating: PropTypes.number.isRequired,\r\n  year: PropTypes.number.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  summary: PropTypes.string.isRequired,\r\n  torrents: PropTypes.array.isRequired,\r\n  // torrents_1080: PropTypes.string.isRequired,\r\n  // 포스터인데 스트링으로 받아오는것 주목\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\n//3-3 fetch 하기 - fetch함수말고 axios함수\n// axios 공식 : https://xn--xy1bk56a.run/axios/guide/\n// fetch할때 this의 변화 https://velog.io/@chajanee/axios-%EB%A5%BC-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90\n// npm i axios\n//  yts.lt/api - 여기서 json 형태로 무비api제공 ( https://yts.mx/api/v2/list_movies.json )\n// 위의 url이 불법이라 자주바뀌는걸 스크래핑해서 노마드가 제공하는게  https://yts-proxy.now.sh/list_movies.json\n\nclass App extends React.Component {\n  state = {\n    isLoding: true,\n    movies: [],\n  };\n\n  // 무비부르기 (단 시간이 걸릴수 있으니 async랑 await둬야)\n  getMovies = async () => {\n    // 종래버전\n    // const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\n    // console.log(movies.data.data.movies);\n\n    // es6버전\n    const {\n      data: {\n        data: { movies },\n      },\n      // API에서 보듯 여러가지 방식으로 받아올수 있고 ?이렇게 rating 에 따라 sort할수도\n    } = await axios.get(\n      \"https://yts-proxy.now.sh/list_movies.json?sort_by=rating&limit=50\"\n    );\n    // console.log(movies);\n\n    // 받아온 movies를 setsate에 넣기 (이름같으면 es6버전으로 쓸수도)\n    // this.setState({movies:movies})\n    // es6버전\n    // 또여기서 보듯 여러가지 state를 동시에 manipulate가능\n    this.setState({ movies, isLoding: false });\n  };\n\n  // 렌더되고 자동으로 불려지는 함수 - 즉 리액트는 변화를 자동으로 감지하고 render해줌\n  //   이거 어떻게 활용하냐면 밑에 render에서 aPI를 통해 데이터를 가져오고(fetch) 그것이 완료되면\n  //    즉, componentDidmount()가 불려지면 그걸 render하는 식으로!!!\n  componentDidMount() {\n    // (예시)\n    // JS함수로 그함수뒤에 ,시간 으로 그시간 이후로 해당 작업을 하란것\n    // setTimeout(() => {\n    //   this.setState({ isLoding: false });\n    // }, 6000);\n\n    // 무비패치\n    this.getMovies();\n  }\n\n  render() {\n    const { isLoding, movies } = this.state;\n\n    // 바로 this.state를 쓰는게 비추\n    return (\n      // <div>\n      //   {isLoding\n      //     ? \"Loading..\"\n      //     : movies.map((movie) => (\n      //         // console.log(movie.torrents);\n\n      //         // 이게 각 무비별로 렌더해줄 포멧으로 movie.js 로 만들고 그걸 여기서 state에서 받아와서 prop으로 주는거다 map을 이용해서\n      //         // return (\n      //         <Movie\n      //           key={movie.id}\n      //           id={movie.id}\n      //           rating={movie.rating}\n      //           year={movie.year}\n      //           title={movie.title}\n      //           summary={movie.summary}\n      //           torrents={movie.torrents}\n      //           // torrents_1020={movie.torrents[1].url}\n      //           poster={movie.medium_cover_image}\n      //         />\n      //         // )};\n      //       ))}\n      // </div>\n\n      // html꾸미기\n      //  jsx 에서 class는 자바의 class를 의미하고, html 내의 class는 className 으로 써줘야\n      <section className=\"container\">\n        {isLoding ? (\n          <div className=\"loader\">\n            <span className=\"loader_text\">Loading...</span>\n          </div>\n        ) : (\n          <div className=\"movies\">\n            {movies.map((movie) => (\n              <Movie\n                genres={movie.genres}\n                key={movie.id}\n                id={movie.id}\n                rating={movie.rating}\n                year={movie.year}\n                title={movie.title}\n                summary={movie.summary}\n                torrents={movie.torrents}\n                poster={movie.medium_cover_image}\n              />\n            ))}\n            ;\n          </div>\n        )}\n      </section>\n    );\n  }\n}\n\nexport default App;\n\n//final github 올리기 - git허브는 서버도 제공해서 홈페이지로 볼수도 있음\n// 1) npm i gh-pages\n// 2) package-json 에 홈페이지와 스크립트 추가\n// 3) 깃허브주소는 : https://allfta.github.io/movie_app  -  https://id.githugb.io/프로젝트명\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}